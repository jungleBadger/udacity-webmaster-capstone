import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { signup } from './signupAPI';

export interface SignupState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
	username: string;
	password: string;

}

const initialState: SignupState = {
  value: 0,
  status: 'idle',
	username: '',
	password: ''
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const performSignup = createAsyncThunk(
  'auth/signup',
  async ({username, password}: any) => {
    // @ts-ignore
	  const response = await signup(username, password);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const signupSlice = createSlice({
  name: 'signup',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
	  updateUsername: (state, action: PayloadAction<string>) => {
		  state.username = action.payload;
	  },
	  updatePassword: (state, action: PayloadAction<string>) => {
		  state.password = action.payload;
	  },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(performSignup.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(performSignup.fulfilled, (state, action) => {
        state.status = 'idle';
      })
      .addCase(performSignup.rejected, (state) => {
        state.status = 'failed';
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const username = (state: RootState) => state.login.username;
export const password = (state: RootState) => state.login.password;

export const { updateUsername, updatePassword } = signupSlice.actions;


export default signupSlice.reducer;
