import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { login, refreshJWT } from './loginAPI';

export interface LoginState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
	username: string;
	password: string;
	authorized: boolean;

}

const initialState: LoginState = {
  value: 0,
  status: 'idle',
	username: '',
	password: '',
	authorized: Boolean(window.localStorage.getItem("token")) || false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const performLogin = createAsyncThunk(
  'auth/login',
  async ({username, password}: {username: string, password: string}, {getState}) => {
	  const response = await login(username, password);
	  window.localStorage.setItem("token", response);
    // The value we return becomes the `fulfilled` action payload
	  return response;
  }
);

export const performJWTRefresh = createAsyncThunk(
  'auth/refresh',
  async (_) => {
	  let jwtToken = window.localStorage.getItem("token") as string;
	  if (jwtToken) {
		  const response = await refreshJWT(jwtToken);
		  window.localStorage.setItem("token", response);
		  return response;
	  }

	  return false;
  }
);

export const performLogout = createAsyncThunk(
  'auth/logout',
  async (_) => {
	  window.localStorage.removeItem("token");
	  return true;
  }
);

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
	  updateUsername: (state, action: PayloadAction<string>) => {
		  state.username = action.payload;
	  },
	  updatePassword: (state, action: PayloadAction<string>) => {
		  state.password = action.payload;
	  }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(performLogin.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(performLogin.fulfilled, (state, action) => {
        state.status = 'idle';
		state.authorized = true;
		window.history.pushState({}, "", "/feature")
      })
      .addCase(performLogin.rejected, (state) => {
        state.status = 'failed';
		  state.authorized = false;
      });

	  builder
		  .addCase(performJWTRefresh.pending, (state) => {
			  state.status = 'loading';
		  })
		  .addCase(performJWTRefresh.fulfilled, (state, action) => {
			  state.status = 'idle';
			  state.authorized = true;

		  })
		  .addCase(performJWTRefresh.rejected, (state) => {
			  state.status = 'failed';
			  state.authorized = false;
		  });

	  builder
		  .addCase(performLogout.fulfilled, (state, action) => {
			  state.authorized = false;
			  window.history.pushState({}, "", "/login")
		  });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const username = (state: RootState) => state.login.username;
export const password = (state: RootState) => state.login.password;
export const authorized = (state: RootState) => state.login.authorized;

export const { updateUsername, updatePassword } = loginSlice.actions;


export default loginSlice.reducer;
